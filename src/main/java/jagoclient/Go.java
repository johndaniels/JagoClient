package jagoclient;

/*
 This file contains the Go applet and its main method.
 */

import jagoclient.board.GoFrame;
import jagoclient.dialogs.GetParameter;
import jagoclient.gui.ButtonAction;
import jagoclient.gui.CardPanel;
import jagoclient.gui.MyLabel;
import jagoclient.gui.MyPanel;
import jagoclient.igs.connection.ConnectionInfo;
import jagoclient.partner.OpenPartnerFrame;
import jagoclient.partner.partner.Partner;

import java.awt.BorderLayout;
import java.awt.Frame;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.List;

import javax.swing.JButton;
import javax.swing.JPanel;

import rene.gui.DoActionListener;

/**
 * To get the password, when there is none (but a user name) and a server
 * connection is requested. Some users do not like their password to be
 * permanently written to the server.cfg file.
 */

class GetPassword extends GetParameter
{
	ConnectionInfo C;
	Go G;
	public String Password;

	public GetPassword (Frame f, Go g, ConnectionInfo c)
	{
		super(f, Global.resourceString("Enter_Password_"), Global
			.resourceString("Password"), g, '*', true);
		C = c;
		G = g;
	}

	@Override
	public boolean tell (Frame f, String s)
	{
		Password = s;
		return true;
	}
}


/**
 * The Go applet is an applet, which resides in a frame opened from the main()
 * method of Go (or generated by the WWW applet that starts Go). This frame is
 * of class MainFrame.
 * <P>
 * It contains a card panel with two panels: the server connections and the
 * partner connections.
 * <P>
 * This applet handles all the buttons in the server and the partner panels.
 * <P>
 * Several private dialogs are used to edit the connection parameters, get the
 * password (if there is none in server.cfg, but automatic login is requested),
 * ask for closing the Jago application altogether and read in other parameters.
 * 
 * @see MainFrame
 */

public class Go extends JPanel implements DoActionListener, ActionListener
{
	int Test = 0;
	List<ConnectionInfo> connectionInfoList;
	List<Partner> PartnerList;
	JButton CConnect, CEdit, CAdd, CDelete, PConnect, PEdit, PAdd, PDelete,
		POpen;
	static Go go;
	String Server = "", MoveStyle = "", Encoding = "";
	int Port;
	public OpenPartnerFrame OPF = null;
	Runnable onConnectClick;

	public Go (Runnable onConnectClick)
	{
		this("", 0, "", "", onConnectClick);
	}

	/**
	 * This init routines has two flavours. One is for specific servers (as used
	 * when the applet is on a Web page of the go server) and one for general
	 * servers.
	 * <P>
	 * The general setup will create a server and a partner panel. Those will be
	 * put into a card panel using the CardJPanel class. The class completely
	 * builds these two panels int this version.
	 * 
	 * @see jagoclient.gui.CardPanel
	 */

	public Go (String server, int port, String movestyle, String encoding, 	Runnable onConnectClick)
	{
		Server = server;
		Port = port;
		MoveStyle = movestyle;
		Encoding = encoding;
		this.onConnectClick = onConnectClick;

		setLayout(new BorderLayout());
		if (Server.equals("")) // general setup
		{
			// create a card panel
			CardPanel cardp = new CardPanel();
			// Server connections panel
			JPanel p1 = new MyPanel();
			p1.setLayout(new BorderLayout());
			// add north label
			p1.add("North", new MyLabel(Global
				.resourceString("Server_Connections__")));
			// add button panel
			JPanel p = new MyPanel();
			Global.setcomponent(p);
			p.add(CConnect = new ButtonAction(this, Global
				.resourceString("Connect"), "ConnectServer"));
			p.add(new MyLabel(" "));
			p.add(CEdit = new ButtonAction(this, Global.resourceString("Edit"),
				"EditServer"));
			p.add(CAdd = new ButtonAction(this, Global.resourceString("Add"),
				"AddServer"));
			p.add(CDelete = new ButtonAction(this, Global
				.resourceString("Delete"), "DeleteServer"));
			p1.add("South", p);
			// add center list with servers
			ConnectionInfo c;
			// add the partner panel to the card panel
			cardp.add(p1, Global.resourceString("Server_Connections"));
			// partner connections panel
			JPanel p2 = new MyPanel();
			p2.setLayout(new BorderLayout());
			// north label
			p2.add("North", new MyLabel(Global
				.resourceString("Partner_Connections__")));
			// list class for partner connections
			add("Center", cardp);
		}
	}

	public void actionPerformed (ActionEvent e)
	{
		doAction(e.getActionCommand());
	}

	public void doAction (String o)
	{
		if ("ConnectServer".equals(o))
		{
			onConnectClick.run();
		}
		else if (Global.resourceString("Open_").equals(o))
		{
			if (OPF == null)
				OPF = new OpenPartnerFrame(this);
			else OPF.refresh();
		}
	}

	public void itemAction (String o, boolean flag)
	{}

	/** search a specific connection by name */
	public ConnectionInfo find (String s)
	{
		for (ConnectionInfo connectionInfo : connectionInfoList)
		{
			if (connectionInfo.Name.equals(s)) return connectionInfo;
		}
		return null;
	}

	/** find a specific partner server by name */
	public Partner pfind (String s)
	{
		for (Partner partner : PartnerList)
		{
			if (partner.Name.equals(s)) return partner;
		}
		return null;
	}

	/** The frame containing the Go applet */
	public static MainFrame F = null;

	/** open a local game window (called from main) */
	static void openlocal (String file)
	{
		GoFrame gf = new GoFrame(new Frame(), "Local");
		gf.setVisible(true);
		gf.load(file);
	}
}
